// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enum for user roles
enum UserRole {
  SUPER_ADMIN
  ADMIN
  EMPLOYEE
  SALES_PERSON
  CUSTOMER
}

// Enum for referral statuses
enum ReferralStatus {
  PENDING
  CONFIRMED
  REWARDED
  EXPIRED
}

// Enum for customer statuses
enum CustomerStatus {
  LEAD
  PROSPECT
  ACTIVE
  INACTIVE
  CHURNED
}

// Extended user profile (updated for NextAuth)
model UserProfile {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String?   @unique // For referral links
  role          UserRole  @default(CUSTOMER)
  firstName     String?
  lastName      String?
  phone         String?
  avatar        String?
  companyName   String?
  teamId        String?   @default("main_team") // Single team approach
  
  // NextAuth invitation system
  inviteVerified Boolean   @default(false)
  lineagePath    String[]  // Array of ancestor IDs for efficient queries
  
  // Referral tracking
  referralCode  String?   @unique
  referrerId    String?   // Direct referrer ID
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  
  // Relations
  referrer           UserProfile?           @relation("UserReferrals", fields: [referrerId], references: [id])
  referrals          UserProfile[]          @relation("UserReferrals")
  sentSecureInvites  InviteToken[]          @relation("SecureUserInvites")
  userPermissions    UserPermission[]       // User-specific permissions
  mfaDevices         MFADevice[]            // MFA devices
  auditLogs          SecurityAuditLog[]     // Security audit trail
  stepUpSessions     StepUpSession[]        // Step-up authentication sessions
  
  referralsGiven     ReferralRelationship[] @relation("Referrer")
  referralsReceived  ReferralRelationship[] @relation("Referred")
  rewards            ReferralReward[]
  customersManaged   Customer[] @relation("SalesPersonCustomers")
  salesActivities    SalesActivity[]
  
  @@map("user_profiles")
}

// Secure Magic Link Token System
model MagicLinkToken {
  id              String   @id @default(cuid())
  hashedToken     String   @unique
  email           String
  intent          String   // 'signin', 'invite', 'password-reset'
  userAgent       String?
  ipAddress       String?
  inviteTokenId   String?  // Link to invite for invite-only validation
  expiresAt       DateTime // Should be 5-10 minutes from creation
  used            Boolean  @default(false)
  usedAt          DateTime? // When the token was consumed
  sessionId       String?  // Track session for rotation
  createdAt       DateTime @default(now())
  
  // Relations
  inviteToken     InviteToken? @relation(fields: [inviteTokenId], references: [id])
  
  @@map("magic_link_tokens")
  @@index([email, used, expiresAt])
  @@index([hashedToken])
  @@index([email, createdAt]) // For counting active tokens per user
}

// Secure Invite Token System (replacement for Invite)
model InviteToken {
  id              String   @id @default(cuid())
  token           String   @unique
  email           String?  // Optional pre-filled email
  role            UserRole @default(CUSTOMER)
  invitedBy       String   // referrer user ID
  expiresAt       DateTime
  used            Boolean  @default(false)
  maxUses         Int      @default(1)
  currentUses     Int      @default(0)
  createdAt       DateTime @default(now())
  
  // Relations
  inviter         UserProfile @relation("SecureUserInvites", fields: [invitedBy], references: [id])
  magicLinkTokens MagicLinkToken[]
  
  @@map("invite_tokens")
  @@index([token, used, expiresAt])
}

// Rate Limiting for Magic Link Requests
model MagicLinkRateLimit {
  id              String   @id @default(cuid())
  identifier      String   // email or IP
  type            String   // 'email' or 'ip'
  action          String   // 'request' or 'resend'
  requestCount    Int      @default(1)
  windowStart     DateTime @default(now())
  lastRequest     DateTime @default(now())
  
  @@map("magic_link_rate_limits")
  @@unique([identifier, type, action])
  @@index([identifier, type, action, windowStart])
}

// Active Token Tracking (for capping tokens per user)
model ActiveTokenCount {
  id              String   @id @default(cuid())
  email           String   @unique
  activeCount     Int      @default(0)
  maxAllowed      Int      @default(3) // Max 3 active tokens per email
  lastUpdated     DateTime @default(now())
  
  @@map("active_token_counts")
  @@index([email])
}

// Step-up Authentication for Sensitive Operations
model StepUpSession {
  id              String   @id @default(cuid())
  userId          String   // UserProfile ID
  sessionToken    String   @unique
  operation       String   // 'payout', 'role_change', 'account_delete', etc.
  mfaMethod       String   // 'totp', 'webauthn'
  verified        Boolean  @default(false)
  expiresAt       DateTime // Short-lived (15-30 minutes)
  ipAddress       String?
  userAgent       String?
  
  // Timestamps
  createdAt       DateTime @default(now())
  verifiedAt      DateTime?
  
  // Relations
  user            UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("step_up_sessions")
  @@index([userId, operation])
  @@index([sessionToken])
  @@index([expiresAt])
}

// MFA (Multi-Factor Authentication) System
model MFADevice {
  id              String   @id @default(cuid())
  userId          String   // UserProfile ID
  type            String   // 'totp', 'webauthn'
  name            String   // User-friendly device name
  secret          String?  // TOTP secret (encrypted)
  credentialId    String?  // WebAuthn credential ID
  publicKey       String?  // WebAuthn public key
  counter         Int?     // WebAuthn counter
  isActive        Boolean  @default(true)
  isBackup        Boolean  @default(false) // Backup codes
  
  // Timestamps
  createdAt       DateTime @default(now())
  lastUsedAt      DateTime?
  
  // Relations
  user            UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("mfa_devices")
  @@index([userId, type])
}

// Audit Log for Security Events
model SecurityAuditLog {
  id              String   @id @default(cuid())
  userId          String?  // UserProfile ID (nullable for system events)
  action          String   // 'login', 'logout', 'role_change', 'payout', 'mfa_setup', etc.
  resource        String?  // What was accessed/modified
  details         Json?    // Additional event details
  ipAddress       String?
  userAgent       String?
  success         Boolean  @default(true)
  riskLevel       String   @default("low") // 'low', 'medium', 'high'
  
  // Timestamps
  createdAt       DateTime @default(now())
  
  // Relations
  user            UserProfile? @relation(fields: [userId], references: [id])
  
  @@map("security_audit_logs")
  @@index([userId, action, createdAt])
  @@index([action, createdAt])
  @@index([createdAt])
}

// NextAuth required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Multi-tier referral relationships
model ReferralRelationship {
  id            String         @id @default(cuid())
  referrerId    String         // Who made the referral
  referredId    String         // Who was referred
  level         Int            @default(1) // 1-5 levels deep
  status        ReferralStatus @default(PENDING)
  
  // Referral metadata
  referralLink  String?        // The link used for referral
  ipAddress     String?        // For fraud detection
  userAgent     String?        // For fraud detection
  
  // Timestamps
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  confirmedAt   DateTime?      // When the referral was confirmed
  rewardedAt    DateTime?      // When rewards were distributed
  
  // Relations
  referrer      UserProfile    @relation("Referrer", fields: [referrerId], references: [id])
  referred      UserProfile    @relation("Referred", fields: [referredId], references: [id])
  rewards       ReferralReward[]
  
  @@unique([referrerId, referredId])
  @@map("referral_relationships")
}

// Referral rewards and commissions
model ReferralReward {
  id                 String               @id @default(cuid())
  relationshipId     String               // Link to referral relationship
  userId             String               // Who receives the reward
  level              Int                  // Reward level (1-5)
  rewardType         String               // "commission", "bonus", "points"
  amount             Decimal              @db.Decimal(10,2)
  currency           String               @default("USD")
  
  // Calculation details
  baseAmount         Decimal?             @db.Decimal(10,2) // Original sale amount
  percentage         Decimal?             @db.Decimal(5,2)  // Commission percentage
  
  // Status
  isPaid             Boolean              @default(false)
  
  // Timestamps
  createdAt          DateTime             @default(now())
  paidAt             DateTime?
  
  // Relations
  relationship       ReferralRelationship @relation(fields: [relationshipId], references: [id])
  user              UserProfile          @relation(fields: [userId], references: [id])
  
  @@map("referral_rewards")
}

// Customer management
model Customer {
  id              String         @id @default(cuid())
  
  // Basic info
  firstName       String
  lastName        String
  email           String         @unique
  phone           String?
  company         String?
  position        String?
  
  // Customer classification
  status          CustomerStatus @default(LEAD)
  source          String?        // "referral", "direct", "marketing"
  priority        String?        // "high", "medium", "low"
  
  // Financial
  estimatedValue  Decimal?       @db.Decimal(10,2)
  actualValue     Decimal?       @db.Decimal(10,2)
  
  // Assignment
  salesPersonId   String?        // Assigned sales person
  teamId          String?        @default("main_team") // Single team approach
  
  // Metadata
  notes           String?
  tags            String[]       @default([])
  
  // Timestamps
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  lastContactAt   DateTime?
  
  // Relations
  salesPerson     UserProfile?   @relation("SalesPersonCustomers", fields: [salesPersonId], references: [id])
  activities      SalesActivity[]
  
  @@map("customers")
}

// Sales activity tracking
model SalesActivity {
  id            String      @id @default(cuid())
  
  // Activity details
  type          String      // "call", "email", "meeting", "demo", "proposal"
  subject       String
  description   String?
  outcome       String?     // "positive", "negative", "neutral"
  
  // Relations
  customerId    String
  salesPersonId String
  teamId        String?     @default("main_team") // Single team approach
  
  // Scheduling
  scheduledAt   DateTime?
  completedAt   DateTime?
  
  // Timestamps
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  customer      Customer    @relation(fields: [customerId], references: [id])
  salesPerson   UserProfile @relation(fields: [salesPersonId], references: [id])
  
  @@map("sales_activities")
}

// Team/workspace settings (single team approach)
model TeamSettings {
  id                    String   @id @default(cuid())
  teamId                String   @unique @default("main_team") // Single team approach
  
  // Referral settings
  referralEnabled       Boolean  @default(true)
  maxReferralLevels     Int      @default(5)
  referralRewardEnabled Boolean  @default(true)
  
  // Commission structure (per level)
  level1Commission      Decimal  @default(10.00) @db.Decimal(5,2)
  level2Commission      Decimal  @default(5.00)  @db.Decimal(5,2)
  level3Commission      Decimal  @default(3.00)  @db.Decimal(5,2)
  level4Commission      Decimal  @default(2.00)  @db.Decimal(5,2)
  level5Commission      Decimal  @default(1.00)  @db.Decimal(5,2)
  
  // Business settings
  currency              String   @default("USD")
  timezone              String   @default("UTC")
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@map("team_settings")
}

// Permission system for granular access control
model Permission {
  id          String @id @default(cuid())
  name        String
  description String
  module      String // CUSTOMERS, SALES, REFERRALS, ANALYTICS, etc.
  action      String // VIEW, CREATE, EDIT, DELETE, ASSIGN, EXPORT, IMPERSONATE
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@unique([module, action])
  @@map("permissions")
}

// Role-based permissions (default permissions for each role)
model RolePermission {
  id           String   @id @default(cuid())
  role         UserRole
  permissionId String
  teamId       String   @default("main_team") // Single team approach
  
  // Relations
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([role, permissionId, teamId])
  @@map("role_permissions")
}

// User-specific permission overrides
model UserPermission {
  id           String      @id @default(cuid())
  userId       String      // UserProfile ID
  permissionId String
  teamId       String      @default("main_team") // Single team approach
  granted      Boolean     @default(true) // false = explicitly denied (override role permission)
  
  // Relations
  permission   Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  user         UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([userId, permissionId, teamId])
  @@map("user_permissions")
}
